
Video 1:
    1. Setup & Templates | Part 1
        1. Configure App
            1. Install Django
            2. Start Project
            3. Create App
            4. Add app to settings.py
        2. Templates
            1. Create Templates Folder
            2. Create Templates Store
        3. Views & URLs
            1. Create Views
            2. URLs
            3. Base URLs Configurations
        4. Static Files
            1. "Static" Folder
            2. CSS File
            3. STATICFILES_DIRES
            4. Add Static Files to Page
            5. Add Image
        5. Main Template
            1. Add HTML Boilerplate to main.html
            2. Adding Viewport & Static
            3. Adding Bootstrap
            4. Container/Navbar Placeholder
            5. Inheriting Pages from Main Template
        6. Navbar
            1. Bootstrap Navbar
            2. Dark Theme
            3. Customize Navbar
                1. Navigation bar
                2. Login button & Cart button
            4. Custom CSS
***        
        7. store.html
            1. Layout
                1. Create the Bootstrap columns
            2. Placeholder Content
                1. Images
                2. Titles
                3. "Add" button
                4. "View" button
                5. Price
        8. cart.html
            1. Layout
                1. Create the Bootstrap columns and boxes
            2. cart headers
                1. Back to "Continue Shopping" button
                2. Number of Items
                3. Total Price
                4. "Checkout" button
            3. cart rows
                1. Table
                    1. Items
                    2. Price
                    3. Quantity
                    4. Total Price
        9. checkout.html
            1. layout
                1. Create the Bootstrap columns and boxes
            2. form
                1. User info
                2. Shipping info
                3. Button "Continue"
            3. payment option 
            4. order summary
                1. "Back to Cart" button
                2. Order summary
                3. Details about products
                4. Number of Items
                5. Total Price
***
Video 2:
    2. Data Structures
        1. Models
*           0. Create a diagram for the 5 models from the app
                1. Relationship of all the 5 models from the app
                2. Description of Models
                    1. User = An instance of this models will be created for each customer that registers with our website. This model will give us the ability to later use Django default authentication system without having manually set this up ourselves.
                    2. Customer = Along with a User model each customer will contain a Customer model that holds a one to one relationship to each User. (OneToOneField).
                    3. Product = The product model represents products we have in store.
                    4. Order = The order model will represent a transaction that is placed or pending. The model will hold information such as the transaction ID, data completed and order status. This model will be a child or the customer model but a parent to Order Items.
                    5. OrderItem = An order Item is one item with an order. So for example a shopping cart may consist of many items but is all part of one order. Therefor the OrderItem model will be a child of the PRODUCT model AND the ORDER Model.
                    6. ShippingAddress = Not every order will need shipping information. For orders containing physical products that need to be shipping we will need to create an instance of the shipping model to know where to send the order. Shipping will simply be a child of the order model when necessary.
            1. Import "User" Model
                1. Create a user to be a customer that can buy some products
                2. Create a superuser to manage the app
            2. "Customer" Model
                1. Create a OneToOne relationship between the "User" and "Customer"
            3. "Product", "Order" & "OrderItem" Models
            4. Shipping Model
            5. Migrate database
            6. admin.py
    -> Add 6 products in DataBase (Name, Price, Digital, Image)
        2. Render Products
            1. Query Products
                1. Add products to our store view in store.html
            2. Render Products
                1. Loop Through Products
                2. Replace Fields
                    1. Product Price
                    2. Product Name
                3. Add the products dinamically(with a Loop Through) from DataBase to view store.html
        3. Product Image Field
            1. ImageField()
                1. Install "Pillow" library (py -m pip install Pillow)
    Pillow = library that let's us add the ImageField to our model
            2. MEDIA_ROOT
                1. Set the path where we upload the images (When we upload a image, it is uploaded in that folder)
            3. MEDIA_URL
                1. To render the images out
                2. To acces all of the images from the static file
            4. Urls.py Configuration
                1. Import: static & settings in root urls.py
                2. Add URL path on url patterns -> give the ability to access image by using paths
            5. Render Images
                1. Set the "product.image.url" to display dinamically
            6. Image Error Solution
                1. Add imageURL Method (if the instance has an image, if not, return an empty string)
***
        4. User Cart
            1. Add data (Admin panel)
                1. Attach a customer to our user, and add some order items to go with the order witch we will manually create from the admin panel
            2. Query Data (Cart)
                1. Check if User Authenticated
                2. User not Authenticated (simple page visitor)
            3. Render data (cart.html)
                1. Loop around the cart row and render a row for each item in the cart
                2. Replace "ImageURL, Product Name, Price, Quantity" to dinamically data
            4. Calculating Totals
                1. For the OrderItem model derive the total price from the product price multiplied by the quantity
                2. For the Order model 
                    1. add a get_cart_total to get the total of price
                    2. add a get_cart_items to get the total of items
                    (Use @property decorator to acces like atributes)
            5. Query Totals
            6. Render Totals
                1. output the totals for total_items and for total_price
                    1. order.get_cart_items
                    2. order.get_cart_total|floatformat:2
            7. Checkout Page Data. Order Summary
                1. render cart data in checkout.html
To Do in Video 3 (Site functionality)
    1. Site functionality for authenticated user
        User will be able to:
            1. add to cart
            2. update the cart by changing the quantity, removing items
            3. checkout as an authenticated user
            4. Shipping Address
            5. Process Order
Video 3:
    3. Site functionality -> add some JavaScript to the site
        1. Add to Cart (Setup app and templates)
            1. Functionality for "Logged In" users: "add to cart", "update cart", "checkout"
            2. Ability to checkout WITHOUT payment
            3. Use JavaScript to cover some frontend functionality and sending data to backend
            
            1. Cart.js
                1. Create a card.js file for JavaScript scripts
            2. Add Event Handlers
                1. to the buttons on store.html
                2. Add Class to Buttons
                3. Product ID & Action
                4. Add Event
            3. Use Type Logic
                1. Different behavior of the action
                    1. User Login: 
                        1. Send data to the background
                        2. add this item to the database
                    2. User doesn't have an account
                        1. add data to the browser and store it
                2. Set/Query user (main.html)
                    1. query the users to check his status
            4. updateItem View
                1. Create View for creating or adding quantity to an OrderItem or removing or deleting the item if the action sent over is "remove"
            5. updateUserOrder()
               1. create an event Handler that identifies which type of user has clicked the "add" button and a view.url to send data if that user is logged in
               2. create a function that gets triggered if the user is logged in and have that function send a POST request to the new view (updateItem)
               3. create and use the FETCH API to send a post request. stringify and send the product and action as an Json object
            6. CSRF Token
                1. create a token for JavaScript to pass the post data https://docs.djangoproject.com/en/3.0/ref/csrf/#ajax
                2. send Token with POST request in cart.js
            7. updateItem view Logic
                1. process the 'productId' and 'action' when this data is send to the view from the fetch call and print in console
                2. Create or Update Order & OrderItem
                3. Action logic (update or remove(when quantity is at or zero below) an item from the order)
            8. Cart Total
                1. Add the cart total to the cart icon as we add and remove items
                2. User data is store view
***
        2. Update Cart (Models and rendering real data in pages)
            1. "Add" & "Remove" Clicks as an Event Listener
                1. Decrease the items
                2. Remove Items

                1. Add classes to the up/down arrows and custom attributes for the product ID and action type

        3. Shipping Address (Build Register user cart and orders)
            0. Page Logic
                1. If item needs shipping -> show address fields
                2. check if the items in the cart are Digital
                3. render the payment option
            1. Shipping Method
                1. check if the items are not digital
            2. Order Shipping status
            3. Hide Shipping Form
                1. If is no items is cart -> do not show the shipping-info
            4. Payment Option
                1. hide button & open payment option on submit
                2. add demo payment button
            5. Trigger Payment Action
                1. add an event handler to the "payment-submit" button and a function to trigger on submission
        4. Checkout Form (Guest checkout integration with Cookies)
            1. Hide Form of Fields
                1. if user is logged in -> Hide Name and Email fields
                2. if a user is logged in And Item does NOT need shipping -> Hide form & Open Payment option
            2. Form data
                1. Prep the date before the sending to the backend to process the order
                2. When the button is submitted there are sending 3 things to the backend for processing the order
                    1. Cart Total
                    2. User information (if user is NOT logged in)
                    3. Address shipping (if item in order needs shipping)
        5. Process Order (Add payment integrations at checkout)
            1. Process Order View/url   
                1. create the "view" and "url" pattern for the POST request to send data
            2. Send POST Data
                1. create a post call and send the data to the backend
***
            3. Transaction ID
                1. Import Data Time (view.py)
                2. Set Transaction ID variable
            4. Set Data
                1. parse the data from the post request and query/create some data if a user is authenticated
            5. Confirm total
                1. send total to frontend and make sure that the total sent matches what the cart total is actually supposed to be
            6. Shipping Logic
                1. create an instance of the shipping address if an address was sent
***
Video 4:
    1. Set Cookies
        0. Guest checkout capabilities
            1. User visit the site is able to add items to cart and checkout without ever needing to create an account
            2. Ability to leave the website and still have the items in the cart to next visit
        1. Create cookie for the Cart
            1. create cookie for the cart and store it to browser
            2. get cookie 
        2. Adding/Removing Items
            1. Add to cookie item function
    2. Render cart Total
        1. Query Cart in view.py
            1.  Get cookie in view
        2. Build Cart total
            1. total number of items that the guest visitor has in their cart and update the order objects
    3. Build Order
        0. create an object representation of a real order (a guest user never creates an order until checkout everything in stored in the browser cookies)
        (1. & 2.) -> Build the cart with items without store the information in database
        1. Order Totals
            1. get the cart price total
            2. query product
            3. get & set totals = set the value of total by multiplying the product price by the quantity
        2. Items Queryset
            1. create a representation of an order with a dictionary to do the same for items in the cart
            2. for cart and checkout page render the items and other information -> The item object will contain all the same atributes of the OrderItem model.
        3. Shipping information
            1. Add shipping information if product is shipping
        4. Product Does Not exist
            1. 
    4. cookiesCart() Function
    5. cartData()
    6. Guest Checkout Process
    7. guestOrder() Function